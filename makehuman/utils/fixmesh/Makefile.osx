# #####################################################################
# @(#)Makefile
# ---------------------------------------------------------------------
#  (c)1982-2009 Tangerine-Software
# 
#       Hans-Peter Dusel
#       An der Dreifaltigkeit 9
#       89331 Burgau
#       GERMANY
# 
#       mailto:hdusel@bnv-gz.de
#       http://www.bnv-gz.de/~hdusel
# ---------------------------------------------------------------------
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
# 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to
# 
#       Free Software Foundation, Inc.
#       59 Temple Place - Suite 330
#       Boston, MA  02111-1307, USA
# 
#   Notice, that ``free software'' addresses the fact that this program
#   is __distributed__ under the term of the GNU General Public License
#   and because of this, it can be redistributed and modified under the
#   conditions of this license, but the software remains __copyrighted__
#   by the author. Don't intermix this with the general meaning of
#   Public Domain software or such a derivated distribution label.
# 
#   The author reserves the right to distribute following releases of
#   this program under different conditions or license agreements.
# 
# ---------------------------------------------------------------------
# Do not remove this header - CVS uses it!
# ---------------------------------------------------------------------
#  $Header$
#  $Author$
#  $Date$
# ---------------------------------------------------------------------
#  $Log$
# #####################################################################

# --------------------------------------------
# The Sources and Pathes
# --------------------------------------------
OBJPATH  = 

# The Targets
EXE = fixmesh

CCSRCS   = src/dump.cc src/gauss.cc src/group.cc src/main.cc src/mesh.cc src/obj.cc src/vector.cc 
CSRCS    = 

# Mention all include paths
EXTRA_INC_PATHS   = 

# Mention all library paths
EXTRA_LIB_PATHS   = 

# Mention all librarys
EXTRA_LIBS        = 

# Mention all framework paths
EXTRA_FMWK_PATHS  =

# Mention all frameworks
EXTRA_FWMKS       = Carbon 

EXTRADEFINES =

DEPS = $(addsuffix .d,$(basename $(CSRCS) $(CCSRCS)))
OBJS = $(addsuffix .o,$(basename $(CSRCS) $(CCSRCS)))

# --------------------------------------------
# Compiler
# --------------------------------------------
# --------------------------------------------
# Using GNU CC as Toolchain
# --------------------------------------------
CC  = gcc
CCC = g++

# --------------------------------------------
# Linker
# --------------------------------------------
LN       = g++
LIBTOOL  = libtool
LIBFLAGS = -static
LINKFLAGS =
# LINKFLAGS =

# --------------------------------------------
DEPTOOL = g++
# --------------------------------------------
RM      = rm -f
INSTALL = cp

# --------------------------------------------
# Compiler specific flags
# --------------------------------------------
# Use this, if you dont want to check against STRICT ANSI...
#ANSI_STRICTNESS = -ansi -Wall
ANSI_STRICTNESS =


# For Debugging purposes turn off all optimization
#CFLAGS   = -g $(ANSI_STRICTNESS)
#CCFLAGS  = -g $(ANSI_STRICTNESS)
#OPTFLAGS = -O0

# For Final Release turn on full optimization
CFLAGS   = $(ANSI_STRICTNESS)
CCFLAGS  = $(ANSI_STRICTNESS)
OPTFLAGS = -O4

CCFLAGS += $(foreach file, $(EXTRA_INC_PATHS),  -I $(file))
CFLAGS  += $(foreach file, $(EXTRA_INC_PATHS),  -I $(file))
CCFLAGS += $(foreach file, $(EXTRA_LIB_PATHS),  -L $(file))
CFLAGS  += $(foreach file, $(EXTRA_LIB_PATHS),  -L $(file))
CCFLAGS += $(foreach file, $(EXTRA_FMWK_PATHS), -F $(file))
CFLAGS  += $(foreach file, $(EXTRA_FMWK_PATHS), -F $(file))
LINKFLAGS += $(foreach file, $(EXTRA_LIBS),       -l $(file))
LINKFLAGS += $(foreach file, $(EXTRA_FMWK_PATHS), -F $(file))
LINKFLAGS += $(foreach file, $(EXTRA_FWMKS), -framework $(file))

# The rule to build the targe(s)
$(EXE) :

# ---------------------------------------------------------------------
# Build C and C++ Objects
# ---------------------------------------------------------------------
.SUFFIXES: .c .cc .cp .cpp .c++ .cxx .h .hh .hp .hpp .h++ .hxx .i .o .gch

%.o : %.cpp $(PREFIX).gch
	@echo compiling $< to $@ ...
	@$(CCC) -include $(PREFIX) -MMD -c $(CCFLAGS) $(OPTFLAGS) $(EXTRADEFINES) $< -o $@ 

%.o : %.cc
	@echo compiling $< to $@ ...
	@$(CCC) -MMD -c $(CCFLAGS) $(OPTFLAGS) $(EXTRADEFINES) $< -o $@ 

%.o : %.c
	@echo compiling $< to $@ ...
	@$(CC) -MMD -c $(CFLAGS) $(OPTFLAGS) $(EXTRADEFINES) $< -o $@ 

# ---------------------------------------------------------------------
# Link Object code
# ---------------------------------------------------------------------
# --------------------------------------------
# Build an executeable
# --------------------------------------------
$(EXE) : $(OBJS)
	@echo "Linking $@ ..."
	@$(LN) $(OBJS) $(LINKFLAGS) $(EXTRALIBS) -o $@

# --------------------------------------------
# Build a library
# --------------------------------------------
$(LIB) : $(OBJS)
	@echo "Linking $@ ..."
	@$(LIBTOOL) $(LIBFLAGS) $(OBJS) -o $@
	@$(AR) -rs $@ $(OBJS)


# ---------------------------------------------------------------------
# Cleanup unused stuff
# ---------------------------------------------------------------------
clean:
	$(RM) $(OBJS) $(DEPS) *.obj *~ *.bak core *.gch *%% *~
# ---------------------------------------------------------------------
# Cleanup unused stuff(even harder)
# ---------------------------------------------------------------------
clobber:clean
	$(RM) $(EXE)
	$(RM) *.aux *.lof *.toc *.dvi
	$(RM) .depend
	$(RM) -r .snprj/

# ---------------------------------------------------------------------
# Install
# ---------------------------------------------------------------------
install: $(EXE)
	$(INSTALL) $(EXE) $(HOME)/bin/

# ---------------------------------------------------------------------
# Include dependencies if exists
# ---------------------------------------------------------------------
-include $(DEPS)

